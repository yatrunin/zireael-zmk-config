/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        L_br {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        R_br {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <22 21>;
        };

        Eq {
            bindings = <&kp EQUAL>;
            key-positions = <30 31>;
        };

        L_sq_br {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
        };

        R_sq_br {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <10 9>;
        };

        F_four {
            bindings = <&kp F4>;
            key-positions = <10 11>;
        };
    };

    behaviors {
        Td_sm: Td_sm {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SM";
            #binding-cells = <0>;
            bindings = <&kp K_MUTE>, <&kp LC(LS(A))>;
        };

        Td_dots: Td_dots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOTS";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp SEMICOLON>, <&kp LS(SEMI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LGUI RBKT    &kp Q  &kp W  &kp E        &kp R            &kp T        &kp Y        &kp U           &kp I        &kp O    &kp P     &mt RGUI LBKT
&mt LCTRL GRAVE  &kp A  &kp S  &kp D        &kp F            &kp G        &kp H        &kp J           &kp K        &kp L    &kp SEMI  &mt RCTRL SQT
&mt LALT MINUS   &kp Z  &kp X  &kp C        &kp V            &kp B        &kp N        &kp M           &kp COMMA    &kp DOT  &kp FSLH  &mt RALT BSLH
                               &lt RSE TAB  &mt LSHFT SPACE  &lt LWR RET  &lt LWR ESC  &mt RSHFT BSPC  &lt RSE DEL
            >;
        };

        lower_layer {
            bindings = <
&mt LGUI F1     &kp F2    &kp F3  &kp F4       &kp F5      &kp F6     &kp F7     &kp F8    &kp F9       &kp F10   &kp F11   &kp F12
&mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH     &kp DOLLAR  &kp PRCNT  &kp CARET  &kp AMPS  &kp STAR     &kp LPAR  &kp RPAR  &mt RCTRL MINUS
&mt LALT EQUAL  &kp N1    &kp N2  &kp N3       &kp N4      &kp N5     &kp N6     &kp N7    &kp N8       &kp N9    &kp N0    &mt RIGHT_ALT EQUAL
                                  &lt ADJ TAB  &trans      &trans     &trans     &trans    &lt ADJ DEL
            >;
        };

        raise_layer {
            bindings = <
&kp CAPSLOCK              &kp HOME          &kp PAGE_DOWN           &kp PAGE_UP           &kp END            &kp C_VOLUME_UP    &kp KP_MINUS  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_SLASH     &mt RIGHT_GUI KP_NUM
&mt LCTRL PAUSE_BREAK     &kp LEFT          &kp DOWN                &kp UP_ARROW          &kp RIGHT          &Td_sm             &kp KP_PLUS   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MULTIPLY  &mt RCTRL EQUAL
&mt LEFT_ALT PRINTSCREEN  &kp LC(LS(LEFT))  &kp LC(LS(DOWN_ARROW))  &kp LC(LS(UP_ARROW))  &kp LC(LS(RIGHT))  &kp C_VOLUME_DOWN  &Td_dots      &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N0        &trans
                                                                    &trans                &trans             &lt ADJ RET        &lt ADJ ESC   &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &trans        &none         &trans
            >;
        };
    };
};
